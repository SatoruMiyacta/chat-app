rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isUserAuthenticated(userId) {
      return request.auth.uid == userId
    }

    function isAuthenticated() {
      return request.auth != null
    }

    function requestData() {
      return request.resource.data
    }

    function isValidString(fieldName,maxNumber,minNumber) {
     return requestData()[fieldName] is string 
       && requestData()[fieldName].size() <= maxNumber 
       && requestData()[fieldName].size() >= minNumber 
    }

    function isValidNumber(fieldName,maxNumber,minNumber) {
     return requestData()[fieldName] is number
       && requestData()[fieldName].size() <= maxNumber 
       && requestData()[fieldName].size() >= minNumber 
    }

    function isExist(fieldName) {
      return requestData()[fieldName] != null
    }

    function isNotExist(fieldName) {
      return requestData()[fieldName] == null
    }

    function isRequestServertimestamp(fieldName) {
      return isExist(fieldName)
      && request.time == requestData()[fieldName]
    }

    function isNotUpdated(fieldName) {
      return isNotExist(fieldName)
      || requestData()[fieldName] == resource.data[fieldName]
    }

    match /users/{userId} {
      allow delete: if isUserAuthenticated(userId);
      allow read: if isAuthenticated();
      allow update: if isUserAuthenticated(userId) 
        && isValidString('name',20,1)
        && isValidString('iconUrl',10000,1)
        && isNotUpdated('createdAt')
        && isRequestServertimestamp('updatedAt');
      allow create: if isAuthenticated() 
        && isValidString('name',20,1)
        && isValidString('iconUrl',10000,1)
        && isRequestServertimestamp('createdAt')
        && isRequestServertimestamp('updatedAt');

      match /friends/{friendUserId} {
      allow read, update, create: if isUserAuthenticated(userId);
      allow delete: if isAuthenticated();
    }
      match /groups/{groupId} {
      allow read, update, create, delete: if isUserAuthenticated(userId);
    }
      match /joinedRooms/{roomId} {
      allow read, update, create, delete: if isUserAuthenticated(userId);
    }
    }

    match /rooms/{roomId} {
      allow read: if isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid)/joinedRooms/$(roomId));
      allow create: if isAuthenticated();
      allow delete: if isUserAuthenticated(resource.data.authorId);
      allow update: if isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid)/joinedRooms/$(roomId)) 
        && isRequestServertimestamp('updatedAt');

      match /messages/{messageId} {
        allow read, create, delete: if isAuthenticated()
          && exists(/databases/$(database)/documents/users/$(request.auth.uid)/joinedRooms/$(roomId));
        allow update: if isAuthenticated()
          && exists(/databases/$(database)/documents/users/$(request.auth.uid)/joinedRooms/$(roomId));
      }
    }

    match /groups/{groupId} {
      allow read: if isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid)/groups/$(groupId));
      allow update: if isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid)/groups/$(groupId));
      allow create: if isAuthenticated();
      allow delete: if isUserAuthenticated(resource.data.authorId);

      match /members/{memberId} {
        allow read, create, delete: if isAuthenticated();
        allow update: if isAuthenticated()
          && isNotUpdated('createdAt')
          && isRequestServertimestamp('updatedAt');
      }
    }
    
  }
}