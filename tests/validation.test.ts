import { describe, expect, it } from 'vitest';
import { i } from 'vitest/dist/index-220c1d70';
import {
  test,
  isValidEmail,
  isValidPassword,
  validateBlobSize,
} from '../src/utils';

// // discribe„Ååtest„ÅÆ„Éñ„É≠„ÉÉ„ÇØ„Çí‰Ωú„ÇãÈñ¢Êï∞
// // ÂºïÊï∞„Å´test„Éñ„É≠„ÉÉ„ÇØÂêç„Å®„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞
// describe('test', () => {
//   // it„ÅØ‰∏Ä„Å§„ÅÆtest„Å´„Å§„Åç„ÄÅ‰∏Ä„Å§‰Ωú„Çã
//   // Êó•‰ªò„ÇíYYYY/MM/DD„ÅßËøî„Åôtest
//   it('‰ªäÊó•„ÅÆÊó•‰ªò„ÇíYYYY/MM/DD„ÅßËøî„Åô', () => {
//     const date = new Date(2023, 11, 1);
//     // console.log(date)
//     const dateTest = test(date);
//     // expect„ÅåÊ§úÊüª„Åó„Åü„ÅÑÂÄ§
//     // tobe„Åå„Ç§„Ç≥„Éº„É´Ê≠£„Åó„ÅÑ„ÅãÊ§úÊüª„Åô„Çã
//     expect(dateTest).toBe('2023/12/01');
//   });

//   it('‰ªäÊó•„ÅÆÊó•‰ªò„ÇíYYYY/MM/DD„ÅßËøî„Åô', () => {
//     const date = new Date(2023, 0, 1);
//     // console.log(date)
//     const dateTest = test(date);
//     // expect„ÅåÊ§úÊüª„Åó„Åü„ÅÑÂÄ§
//     // tobe„Åå„Ç§„Ç≥„Éº„É´Ê≠£„Åó„ÅÑ„ÅãÊ§úÊüª„Åô„Çã
//     expect(dateTest).toBe('2023/01/01');
//   });
// });

describe('/utils/validation', () => {
  it('test.gmail.com „ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = 'test.gmail.com';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });

  it('@gmail.com„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = '@gmail.com';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });

  it('test@gmail,com„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = 'test@gmail,com';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });

  it('test„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = 'test';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });

  it('üòÑ„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = 'üòÑ';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });

  it('„ÉÜ„Çπ„Éà@gmail.com„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const email = '„ÉÜ„Çπ„Éà@gmail.com';
    const validEmail = isValidEmail(email);

    expect(validEmail).toBe(false);
  });
});

describe('/utils/validation', () => {
  it('„Éë„Çπ„ÉØ„Éº„Éâ„ÉÜ„Çπ„Éà„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const password = '„Éë„Çπ„ÉØ„Éº„Éâ„ÉÜ„Çπ„Éà';
    const validPassword = isValidPassword(password);

    expect(validPassword).toBe(false);
  });

  it('123456789„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const password = '123456789';
    const validPassword = isValidPassword(password);

    expect(validPassword).toBe(true);
  });

  it('üòÑüòÑüòÑüòÑüòÑüòÑ„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅfalse„ÇíËøî„Åô', () => {
    const password = 'üòÑüòÑüòÑüòÑüòÑüòÑ';
    const validPassword = isValidPassword(password);

    expect(validPassword).toBe(false);
  });
});

describe('/utils/validation', () => {
  it('Âà∂Èôê„Å´Âºï„Å£„Åã„Åã„Çâ„Å™„ÅÑ„Çµ„Ç§„Ç∫(10MB)„ÅÆblob„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅblob„ÇíËøî„Åô', () => {
    let str = '';

    // Âçò‰Ωç„ÅØbyte
    const fileSize = 10485760;

    for (let i = 0; str.length < fileSize; i++) {
      str = str + 't';
    }

    const blob = new Blob([str], { type: 'text' });

    const file = validateBlobSize(blob);

    expect(file).toEqual(blob);
  });

  it('Âà∂Èôê„Å´Âºï„Å£„Åã„Åã„Çâ„Å™„ÅÑ„Çµ„Ç§„Ç∫(10485759Byte)„ÅÆblob„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅblob„ÇíËøî„Åô', () => {
    let str = '';

    // Âçò‰Ωç„ÅØbyte
    const fileSize = 10485759;

    for (let i = 0; str.length < fileSize; i++) {
      str = str + 't';
    }

    const blob = new Blob([str], { type: 'text' });
    // console.log(blob.size);

    const file = validateBlobSize(blob);

    expect(file).toEqual(blob);
  });

  it('Âà∂Èôê„Å´Âºï„Å£„Åã„Åã„Çã„Çµ„Ç§„Ç∫(10485761Byte)„ÅÆblob„ÇíÊ∏°„Åó„Åü„Çâ„ÄÅÁîªÂÉè„Çµ„Ç§„Ç∫„ÅØÔºëÔºêMB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ „ÇíËøî„Åô', () => {
    let str = '';

    // Âçò‰Ωç„ÅØbyte
    const fileSize = 10485761;

    for (let i = 0; str.length < fileSize; i++) {
      str = str + 't';
    }

    const blob = new Blob([str], { type: 'text' });

    expect(() => {
      validateBlobSize(blob);
    }).toThrow();
  });
});
